<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.33">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.8"/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.70">
    <script>def CONTAINER_NAME=&quot;petclinic&quot;
def CONTAINER_TAG=&quot;latest&quot;
def DOCKER_HUB_USER=&quot;chgoutam&quot;
def HTTP_PORT=&quot;8090&quot;

node(&apos;master&apos;) {

    stage(&apos;Initialize&apos;){
        def mavenHome  = tool name: &apos;MAVEN3&apos;, type: &apos;maven&apos;
        env.PATH = &quot;${mavenHome}/bin:${env.PATH}&quot;
        sh &quot;echo ${env.GIT_COMMIT}&quot;
    }

    stage(&apos;Checkout&apos;) {
	    git &apos;https://github.com/gouthamchilakala/jenkins-pipeline.git&apos;	
    }

    stage(&apos;Build&apos;){
        sh &quot;mvn clean package&quot;
    }

    stage(&quot;Image Prune&quot;){
        imagePrune(CONTAINER_NAME)
    }

    stage(&apos;Image Build&apos;){
        imageBuild(CONTAINER_NAME, CONTAINER_TAG)
    }

    stage(&apos;Push to Docker Registry&apos;){
        withCredentials([usernamePassword(credentialsId: &apos;dockerHubAccount&apos;, usernameVariable: &apos;USERNAME&apos;, passwordVariable: &apos;PASSWORD&apos;)]) {
            pushToImage(CONTAINER_NAME, CONTAINER_TAG, USERNAME, PASSWORD)
        }
    }

    stage(&apos;Run App&apos;){
        runApp(CONTAINER_NAME, CONTAINER_TAG, DOCKER_HUB_USER, HTTP_PORT)
    }
    
    stage(&quot;Image Prune Finally&quot;){
        imagePrune(CONTAINER_NAME)
    }

}

def imagePrune(containerName){
    try {
        sh &quot;docker image prune -f&quot;
        sh &quot;docker stop $containerName&quot;
    } catch(error){}
}

def imageBuild(containerName, tag){
    sh &quot;docker build -t $containerName:$tag  -t $containerName --pull --no-cache .&quot;
    echo &quot;Image build complete&quot;
}

def pushToImage(containerName, tag, dockerUser, dockerPassword){
    sh &quot;docker login -u $dockerUser -p $dockerPassword&quot;
    sh &quot;docker tag $containerName:$tag $dockerUser/$containerName:$tag&quot;
    sh &quot;docker push $dockerUser/$containerName:$tag&quot;
    echo &quot;Image push complete&quot;
}

def runApp(containerName, tag, dockerHubUser, httpPort){
    sh &quot;docker pull $dockerHubUser/$containerName&quot;
    sh &quot;docker run -d --rm -p $httpPort:$httpPort --name $containerName $dockerHubUser/$containerName:$tag&quot;
    echo &quot;Application started on port: ${httpPort} (http)&quot;
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>